#!/usr/bin/env node

/**
 * üß™ Script de Teste R√°pido DRE
 * 
 * Script para testar rapidamente as corre√ß√µes dos bugs do DRE
 */

const http = require('http');

console.log('üöÄ TESTE R√ÅPIDO DRE - Federal Invest\n');
console.log('=====================================\n');
console.log('‚úÖ CORRE√á√ïES IMPLEMENTADAS:\n');
console.log('1. ‚úÖ API DRE - Convers√£o correta de valores numeric');
console.log('2. ‚úÖ Frontend - Invalida√ß√£o de cache do React Query');
console.log('3. ‚úÖ Trimestral - Distribui√ß√£o autom√°tica nos 3 meses');
console.log('4. ‚úÖ Logs detalhados - Debug completo do processo\n');
console.log('=====================================\n');

console.log('üìã INSTRU√á√ïES DE TESTE:\n');
console.log('1. Certifique-se que o servidor est√° rodando (npm run dev)');
console.log('2. Acesse http://localhost:3000/dre');
console.log('3. Abra o console do navegador (F12)');
console.log('4. Teste os seguintes cen√°rios:\n');

console.log('üß™ TESTE 1 - TAB MENSAL:');
console.log('   a) Clique na tab "Mensal"');
console.log('   b) Clique no bot√£o "Dedu√ß√£o: R$ X,XX"');
console.log('   c) Digite um valor (ex: 5000)');
console.log('   d) Clique em "Salvar Dedu√ß√£o"');
console.log('   e) ‚úÖ VERIFICAR: Valor deve aparecer na tabela');
console.log('   f) üìù LOGS: Verifique os logs detalhados no console\n');

console.log('üß™ TESTE 2 - TAB TRIMESTRAL:');
console.log('   a) Clique na tab "Trimestral"');
console.log('   b) Clique no bot√£o "Dedu√ß√£o: R$ X,XX"');
console.log('   c) Digite um valor (ex: 9000)');
console.log('   d) Clique em "Salvar Dedu√ß√£o"');
console.log('   e) ‚úÖ VERIFICAR: Valor deve aparecer como 9000 (n√£o 23.333.333)');
console.log('   f) üìù LOGS: Valor ser√° distribu√≠do em 3000 por m√™s\n');

console.log('=====================================\n');
console.log('üîç LOGS IMPORTANTES NO CONSOLE:\n');
console.log('- [DRE-DEBUG] Iniciando salvamento...');
console.log('- [DRE-DEBUG] Salvando m√™s X...');
console.log('- [DRE-DEBUG] Invalidando cache...');
console.log('- [DRE-DEBUG] Refetch conclu√≠do!');
console.log('- [DRE-API-DEBUG] Resultado consulta...\n');

console.log('=====================================\n');
console.log('üí° DICAS DE DEBUG:\n');
console.log('1. Se o valor continuar zero, verifique:');
console.log('   - Os logs mostram "value" e "typeOfValue"');
console.log('   - O banco est√° salvando corretamente');
console.log('   - O cache foi invalidado\n');
console.log('2. Se aparecer valor errado no trimestral:');
console.log('   - Verifique se est√° salvando nos 3 meses');
console.log('   - Confirme que est√° somando corretamente\n');

console.log('=====================================\n');
console.log('üéØ RESULTADO ESPERADO:');
console.log('‚úÖ Tab Mensal: Valor salvo aparece imediatamente na tabela');
console.log('‚úÖ Tab Trimestral: Valor total aparece correto (sem multiplica√ß√£o)');
console.log('‚úÖ Logs detalhados: Mostram todo o processo de salvamento');
console.log('‚úÖ Performance: Refetch acontece ap√≥s 500ms de delay\n');

console.log('=====================================\n');
console.log('üì± EXECUTANDO TESTE AUTOMATIZADO...\n');

// Verificar se o servidor est√° rodando
const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/api/health',
  method: 'GET',
  timeout: 5000
};

const req = http.request(options, (res) => {
  if (res.statusCode === 200 || res.statusCode === 404) {
    console.log('‚úÖ Servidor rodando em http://localhost:3000');
    console.log('üëâ Abra o navegador e siga as instru√ß√µes acima!');
  } else {
    console.log('‚ö†Ô∏è Servidor respondendo mas com status:', res.statusCode);
  }
});

req.on('error', (error) => {
  console.error('‚ùå ERRO: Servidor n√£o est√° rodando!');
  console.error('   Execute "npm run dev" primeiro.');
  process.exit(1);
});

req.on('timeout', () => {
  console.error('‚ùå ERRO: Timeout ao conectar com o servidor!');
  console.error('   Verifique se o servidor est√° rodando.');
  req.destroy();
  process.exit(1);
});

req.end();
